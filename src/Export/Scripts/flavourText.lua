--
-- export flavour text data
--
local function normalizeId(id)
	id = tostring(id)
	if id:match("_+$") then
		-- remove trailing underscores and any trailing letters after them
		-- Sacred Flame 	
		return id:gsub("[_a-z]+$", "")
	else
		-- no trailing underscore, return as is
		return id
	end
end

local function cleanAndEscape(str)
	-- Normalize newlines
	str = str:gsub("\r\n", "\n")

	local lines = {}
	for line in str:gmatch("[^\n]+") do
		line = line:match("^%s*(.-)%s*$") -- trim each line
		if line ~= "" then
			table.insert(lines, line)
		end
	end

	-- Rejoin lines with escaped \n
	local cleaned = table.concat(lines, "\\n")

	-- Escape internal double quotes
	cleaned = cleaned:gsub('"', '\\"')

	return cleaned
end

local uniqueNameLookup = {}

for row in dat("UniqueStashLayout"):Rows() do
	local name = row.WordsKey.Text2
	local id = normalizeId(row.ItemVisualIdentity.Id)
	uniqueNameLookup[id] = name
end

local out = io.open("../Data/FlavourText.lua", "w")
out:write('-- This file is automatically generated, do not edit!\n')
out:write('-- Flavour text data (c) Grinding Gear Games\n\n')
out:write('return {\n')

for c in dat("FlavourText"):Rows() do
	local cleanedText = cleanAndEscape(tostring(c.Text))
	local id = normalizeId(c.Id)
	local name = uniqueNameLookup[id]

	out:write('\t[', c._rowIndex, '] = {\n')
	out:write('\t\tId = "', tostring(c.Id):gsub('"', '\\"'), '",\n')
	out:write('\t\tText = "', cleanedText, '",\n')
	if name then
		out:write('\t\tName = "', name, '",\n')
	end
	out:write('\t},\n')
end

out:write('}\n')
out:close()

print(string.format("Flavour Texts exported."))