--
-- Dexterity support gems
-- Skill data (c) Grinding Gear Games
--
local skills, mod, flag, skill = ...

#skill SupportAdhesiveGrenadesPlayer
#set SupportAdhesiveGrenadesPlayer
statMap = {
	["support_sticky_grenade_damage_+%_final"] = {
		mod("Damage", "MORE", nil),
	},
},
#mods
#skillEnd

#skill SupportAdhesiveGrenadesPlayerTwo
#set SupportAdhesiveGrenadesPlayerTwo
statMap = {
	["support_sticky_grenade_damage_+%_final"] = {
		mod("Damage", "MORE", nil),
	},
},
#mods
#skillEnd

#skill SupportAdhesiveGrenadesPlayerThree
#set SupportAdhesiveGrenadesPlayerThree
statMap = {
	["support_sticky_grenade_damage_+%_final"] = {
		mod("Damage", "MORE", nil),
	},
},
#mods
#skillEnd

#skill SupportAdmixturePlayer
#set SupportAdmixturePlayer
statMap = {
	["mixed_maladies_poison_effect_+%_final_vs_bleeding"] = {
		mod("Damage", "MORE", nil, 0, KeywordFlag.Poison, { type = "ActorCondition", actor = "enemy", var = "Bleeding" }),
	},
	["mixed_maladies_bleed_effect_+%_final_vs_poisoned"] = {
		mod("Damage", "MORE", nil, 0, KeywordFlag.Bleed, { type = "ActorCondition", actor = "enemy", var = "Poisoned" }),
	},
},
#mods
#skillEnd

#skill SupportAilithLineagePlayer
#set SupportAilithLineagePlayer
#mods
#skillEnd

#skill SupportAlignmentPlayer
#set SupportAlignmentPlayer
#mods
#skillEnd

#skill SupportAlignmentPlayerTwo
#set SupportAlignmentPlayerTwo
#mods
#skillEnd

#skill SupportAlignmentPlayerThree
#set SupportAlignmentPlayerThree
#mods
#skillEnd

#skill SupportAmmoConservationPlayer
#set SupportAmmoConservationPlayer
statMap = {
	["crossbow_attack_%_chance_to_not_consume_ammo"] = {
		mod("ChanceToNotConsumeAmmo", "BASE", nil),
	},
},
#mods
#skillEnd

#skill SupportAmmoConservationPlayerTwo
#set SupportAmmoConservationPlayerTwo
statMap = {
	["crossbow_attack_%_chance_to_not_consume_ammo"] = {
		mod("ChanceToNotConsumeAmmo", "BASE", nil),
	},
},
#mods
#skillEnd

#skill SupportAmmoConservationPlayerThree
#set SupportAmmoConservationPlayerThree
statMap = {
	["crossbow_attack_%_chance_to_not_consume_ammo"] = {
		mod("ChanceToNotConsumeAmmo", "BASE", nil),
	},
	["support_ammo_conservation_crossbow_reload_speed_+%_final"] = {
		mod("ReloadSpeed", "MORE", nil),
	},
},
#mods
#skillEnd

#skill SupportArakaalisLustPlayer
#set SupportArakaalisLustPlayer
#mods
#skillEnd

#skill SupportAmmoConservationPlayerFour
#set SupportAmmoConservationPlayerFour
#mods
#skillEnd

#skill SupportBlindPlayer
#set SupportBlindPlayer
#mods
#skillEnd

#skill SupportBlindPlayerTwo
#set SupportBlindPlayerTwo
#mods
#skillEnd

#skill SupportBlindsidePlayer
#set SupportBlindsidePlayer
statMap = {
	["support_unseen_critical_damage_multiplier_+%_final_vs_blinded_enemies"] = {
		mod("CritMultiplier", "MORE", nil, 0, 0, { type = "ActorCondition", actor = "enemy", var = "Blinded" } ),
	},
	["support_unseen_critical_strike_chance_+%_final_vs_blinded_enemies"] = {
		mod("CritChance", "MORE", nil, 0, 0, { type = "ActorCondition", actor = "enemy", var = "Blinded" } ),
	},
},
#mods
#skillEnd

#skill SupportBountyPlayer
#set SupportBountyPlayer
#mods
#skillEnd

#skill SupportBountyPlayerTwo
#set SupportBountyPlayerTwo
#mods
#skillEnd

#skill SupportBrambleslamPlayer
#set SupportBrambleslamPlayer
#mods
#skillEnd

#skill TriggeredBrambleslamPlayer
#set TriggeredBrambleslamPlayer
#flags attack
#mods
#skillEnd

#skill SupportDazedBreakPlayer
#set SupportDazedBreakPlayer
#mods
#skillEnd

#skill SupportBurstingPlaguePlayer
#set SupportBurstingPlaguePlayer
#mods
#skillEnd

#skill PlagueBurstPlayer
#set PlagueBurstPlayer
#flags area
#mods
#skillEnd

#skill SupportCadencePlayer
#set SupportCadencePlayer
#mods
#skillEnd

#skill SupportCaltropsPlayer
#set SupportCaltropsPlayer
#mods
#skillEnd

#skill TriggeredCaltropsPlayer
#set TriggeredCaltropsPlayer
#flags attack projectile duration area
#mods
#skillEnd

#skill SupportChainPlayer
#set SupportChainPlayer
statMap = {
	["support_chain_hit_damage_+%_final"] = {
		mod("Damage", "MORE", nil, ModFlag.Hit),
	},
},
#mods
#skillEnd

#skill SupportChainPlayerTwo
#set SupportChainPlayerTwo
statMap = {
	["support_chain_hit_damage_+%_final"] = {
		mod("Damage", "MORE", nil, ModFlag.Hit),
	},
},
#mods
#skillEnd

#skill SupportChainPlayerThree
#set SupportChainPlayerThree
statMap = {
	["support_chain_hit_damage_+%_final"] = {
		mod("Damage", "MORE", nil, ModFlag.Hit),
	},
},
#mods
#skillEnd

#skill SupportChargeProfusionPlayer
#set SupportChargeProfusionPlayer
#mods
#skillEnd

#skill SupportChargeProfusionPlayerTwo
#set SupportChargeProfusionPlayerTwo
#mods
#skillEnd

#skill SupportChargedShotsPlayer
#set SupportChargedShotsPlayer
statMap = {
	["support_charged_shots_%_damage_to_gain_as_lightning"] = {
		mod("DamageGainAsLightning", "BASE", nil),
		div = 3,
	},
},
#mods
#skillEnd

#skill SupportChargedShotsPlayerTwo
#set SupportChargedShotsPlayerTwo
statMap = {
	["support_charged_shots_%_damage_to_gain_as_lightning"] = {
		mod("DamageGainAsLightning", "BASE", nil),
		div = 3,
	},
},
#mods
#skillEnd

#skill SupportCharmBountyPlayer
#set SupportCharmBountyPlayer
#mods
#skillEnd

#skill SupportCloseCombatPlayer
#set SupportCloseCombatPlayer
statMap = {
	["support_close_combat_attack_damage_+%_final_from_distance"] = {
		mod("Damage", "MORE", nil, 0, 0, { type = "DistanceRamp", ramp = {{10,1},{35,0}} }),
	},
},
#mods
#skillEnd

#skill SupportCloseCombatPlayerTwo
#set SupportCloseCombatPlayerTwo
statMap = {
	["support_close_combat_attack_damage_+%_final_from_distance"] = {
		mod("Damage", "MORE", nil, 0, 0, { type = "DistanceRamp", ramp = {{10,1},{35,0}} }),
	},
},
#mods
#skillEnd

#skill SupportComboFinisherPlayer
#set SupportComboFinisherPlayer
#mods
#skillEnd

#skill SupportComboFinisherPlayerTwo
#set SupportComboFinisherPlayerTwo
#mods
#skillEnd

#skill SupportCommiseratePlayer
#set SupportCommiseratePlayer
statMap = {
	["support_ailment_effect_+%_final_while_afflicted_by_relevant_ailment"] = {
		mod("AilmentMagnitude", "MORE", nil, 0, KeywordFlag.Bleed, { type = "Condition", var = "Bleeding" }),
		mod("AilmentMagnitude", "MORE", nil, 0, KeywordFlag.Ignite, { type = "Condition", var = "Ignited" }),
		mod("AilmentMagnitude", "MORE", nil, 0, KeywordFlag.Poison, { type = "Condition", var = "Poisoned" }),
		mod("EnemyShockMagnitude", "MORE", nil, 0, 0, { type = "Condition", var = "Shocked" }),
		mod("EnemyChillMagnitude", "MORE", nil, 0, 0, { type = "Condition", var = "Chilled" }),
		mod("EnemyFreezeEffect", "MORE", nil, 0, 0, { type = "Condition", var = "Frozen" }),
		mod("EnemyElectrocuteEffect", "MORE", nil, 0, 0, { type = "Condition", var = "Electrocuted" }),
	},
},
#mods
#skillEnd

#skill SupportCooldownRecoveryPlayer
#set SupportCooldownRecoveryPlayer
statMap = {
	["support_cooldown_reduction_cooldown_recovery_+%"] = {
		mod("CooldownRecovery", "INC", nil),
	},
},
#mods
#skillEnd

#skill SupportCooldownRecoveryPlayerTwo
#set SupportCooldownRecoveryPlayerTwo
statMap = {
	["support_cooldown_reduction_cooldown_recovery_+%"] = {
		mod("CooldownRecovery", "INC", nil),
	},
},
#mods
#skillEnd

#skill SupportCorrosionPlayer
#set SupportCorrosionPlayer
#mods
#skillEnd

#skill SupportCrescendoPlayer
#set SupportCrescendoPlayer
#mods
#skillEnd

#skill SupportCrescendoPlayerTwo
#set SupportCrescendoPlayerTwo
#mods
#skillEnd

#skill SupportCrescendoPlayerThree
#set SupportCrescendoPlayerThree
#mods
#skillEnd

#skill SupportCullingStrikePlayer
#set SupportCullingStrikePlayer
statMap = {
	["support_culling_strike_vs_rare_or_unique_enemy"] = {
		mod("CullPercent", "MAX", nil, 0, 0, { type = "ActorCondition", actor = "enemy", var = "RareOrUnique" }),
		value = 10
	},
},
#mods
#skillEnd

#skill SupportCullingStrikePlayerTwo
#set SupportCullingStrikePlayerTwo
statMap = {
	["support_culling_strike_vs_rare_or_unique_enemy"] = {
		mod("CullPercent", "MAX", nil, 0, 0, { type = "ActorCondition", actor = "enemy", var = "RareOrUnique" }),
		value = 10
	},
},
#mods
#skillEnd

#skill SupportCulminationPlayer
#set SupportCulminationPlayer
#mods
#skillEnd

#skill SupportCulminationPlayerTwo
#set SupportCulminationPlayerTwo
#mods
#skillEnd

#skill SupportDazePlayer
#set SupportDazePlayer
#mods
#skillEnd

#skill SupportDazzlePlayer
#set SupportDazzlePlayer
#mods
#skillEnd

#skill SupportDeadlyHeraldsPlayer
#set SupportDeadlyHeraldsPlayer
statMap = {
	["support_deadly_heralds_damage_+%_final"] = {
		mod("Damage", "MORE", nil),
	}
},
#mods
#skillEnd

#skill SupportDeadlyPoisonPlayer
#set SupportDeadlyPoisonPlayer
statMap = {
	["support_deadly_poison_hit_damage_+%_final"] = {
		mod("Damage", "MORE", nil, ModFlag.Hit),
	},
	["support_deadly_poison_poison_effect_+%_final"] = {
		mod("AilmentMagnitude", "MORE", nil, 0, KeywordFlag.Poison),
	},
},
#mods
#skillEnd

#skill SupportDeadlyPoisonPlayerTwo
#set SupportDeadlyPoisonPlayerTwo
statMap = {
	["support_deadly_poison_hit_damage_+%_final"] = {
		mod("Damage", "MORE", nil, ModFlag.Hit),
	},
	["support_deadly_poison_poison_effect_+%_final"] = {
		mod("AilmentMagnitude", "MORE", nil, 0, KeywordFlag.Poison),
	},
},
#mods
#skillEnd

#skill SupportDelayedGratificationPlayer
#set SupportDelayedGratificationPlayer
#mods
#skillEnd

#skill SupportDelayedReactionPlayer
#set SupportDelayedReactionPlayer
statMap = {
	["support_sunblast_hazard_hazard_damage_+%_final"] = {
		mod("Damage", "MORE", nil),
	},
	["support_sunblast_hazard_hazard_duration_+%_final"] = {
		mod("Duration", "MORE", nil),
	},
},
#mods
#skillEnd

#skill SupportDeliberationPlayer
#set SupportDeliberationPlayer
statMap = {
	["support_deliberation_damage_+%_final"] = {
		mod("Damage", "MORE", nil),
	},
},
#mods
#skillEnd

#skill SupportDurabilityPlayer
#set SupportDurabilityPlayer
#mods
#skillEnd

#skill SupportElectrocutePlayer
#set SupportElectrocutePlayer
#mods
#skillEnd

#skill SupportEscalatingPoisonPlayer
#set SupportEscalatingPoisonPlayer
statMap = {
	["support_multi_poison_poison_duration_+%_final"] = {
		mod("EnemyPoisonDuration", "MORE", nil),
	},
	["number_of_additional_poison_stacks"] = {
		mod("PoisonStacks", "BASE", nil),
		flag("PoisonCanStack"),
	},
},
#mods
#skillEnd

#skill SupportExcoriatePlayer
#set SupportExcoriatePlayer
statMap = {
	["support_elemental_assault_melee_damage_+%_final_per_elemental_ailment_on_target"] = {
		mod("Damage", "MORE", nil, ModFlag.Melee, 0, { type = "ActorCondition", actor = "enemy", var = "Ignited" }),
		mod("Damage", "MORE", nil, ModFlag.Melee, 0, { type = "ActorCondition", actor = "enemy", var = "Chilled" }),
		mod("Damage", "MORE", nil, ModFlag.Melee, 0, { type = "ActorCondition", actor = "enemy", var = "Frozen" }),
		mod("Damage", "MORE", nil, ModFlag.Melee, 0, { type = "ActorCondition", actor = "enemy", var = "Shocked" }),
		mod("Damage", "MORE", nil, ModFlag.Melee, 0, { type = "ActorCondition", actor = "enemy", var = "Electrocuted" }),
	},
},
#mods
#skillEnd

#skill SupportFerocityPlayer
#set SupportFerocityPlayer
statMap = {
	["skill_consume_frenzy_charge_to_gain_skill_speed_+%_final"] = {
		mod("Speed", "MORE", nil, 0, 0, { type = "MultiplierThreshold", var = "RemovableFrenzyCharge", threshold = 1 }),
	},
},
#mods
#skillEnd

#skill SupportFlowPlayer
#set SupportFlowPlayer
#mods
#skillEnd

#skill SupportForkPlayer
#set SupportForkPlayer
statMap = {
	["support_fork_forked_projectile_damage_+%_final"] = {
		mod("Damage", "MORE", nil, 0, 0, { type = "StatThreshold", stat = "ForkedCount", threshold = 1 }),
	},
},
#mods
#skillEnd

#skill SupportFrenziedRipostePlayer
#set SupportFrenziedRipostePlayer
#mods
#skillEnd

#skill SupportFrozenSpitePlayer
#set SupportFrozenSpitePlayer
#mods
#skillEnd

#skill TriggeredSupportFrozenSpiteIceFragmentPlayer
#set TriggeredSupportFrozenSpiteIceFragmentPlayer
#flags hit area projectile
#mods
#skillEnd

#skill SupportGambleshotPlayer
#set SupportGambleshotPlayer
statMap = {
	[ "support_gambleshot_projectile_damage_+%_final"] = {
		mod("Damage", "MORE", nil),
	},
},
#mods
#skillEnd

#skill SupportGarukhansResolvePlayer
#set SupportGarukhansResolvePlayer
#mods
#skillEnd

#skill SupportHeightenedAccuracyPlayer
#set SupportHeightenedAccuracyPlayer
statMap = {
	["support_additional_accurary_rating_+%_final"] = {
		mod("Accuracy", "MORE", nil),
	},
},
#mods
#skillEnd

#skill SupportHeightenedAccuracyPlayerTwo
#set SupportHeightenedAccuracyPlayerTwo
statMap = {
	["support_additional_accurary_rating_+%_final"] = {
		mod("Accuracy", "MORE", nil),
	},
},
#mods
#skillEnd

#skill SupportHeightenedChargesPlayer
#set SupportHeightenedChargesPlayer
#mods
#skillEnd

#skill SupportHitAndRunPlayer
#set SupportHitAndRunPlayer
#mods
#skillEnd

#skill SupportHobblePlayer
#set SupportHobblePlayer
#mods
#skillEnd

#skill SupportImpalePlayer
#set SupportImpalePlayer
#mods
#skillEnd

#skill SupportChargeInhibitionPlayer
#set SupportChargeInhibitionPlayer
statMap = {
	["support_inhibitor_damage_+%_final_per_charge_type"] = {
		mod("Damage", "MORE", nil, 0, 0, { type = "MultiplierThreshold", var = "FrenzyCharge", threshold = 1 }),
		mod("Damage", "MORE", nil, 0, 0, { type = "MultiplierThreshold", var = "PowerCharge", threshold = 1 }),
		mod("Damage", "MORE", nil, 0, 0, { type = "MultiplierThreshold", var = "EnduranceCharge", threshold = 1 }),
	},
},
#mods
#skillEnd

#skill SupportInnervatePlayer
#set SupportInnervatePlayer
statMap = {
	["support_innervate_buff_grant_%_added_lightning_attack_damage"] = {
		mod("DamageGainAsLightning", "BASE", nil, ModFlag.Attack, 0, { type = "Condition", var = "KilledShockedLast3Seconds" }, { type = "GlobalEffect", effectType = "Buff", effectName = "Innervate" }),
	},
	["support_innervate_buff_base_duration_ms"] = {
		mod("Duration", "BASE", nil, 0, 0, { type = "Condition", var = "KilledShockedLast3Seconds" }, { type = "GlobalEffect", effectType = "Buff" }),
		div = 1000,
	},
},
#mods
#skillEnd

#skill SupportLastingShockPlayer
#set SupportLastingShockPlayer
statMap = {
	["support_lasting_shock_chance_to_shock_+%_final"] = {
		mod("EnemyShockChance", "MORE", nil),
	},
},
#mods
#skillEnd

#skill SupportLeveragePlayer
#set SupportLeveragePlayer
#mods
#skillEnd

#skill SupportLifeFlaskPlayer
#set SupportLifeFlaskPlayer
#mods
#skillEnd

#skill SupportLifeOnCullPlayer
#set SupportLifeOnCullPlayer
#mods
#skillEnd

#skill SupportAddedLightningDamagePlayer
#set SupportAddedLightningDamagePlayer
statMap = {
	["support_cold_and_fire_damage_+%_final"] = {
		mod("ColdDamage", "MORE", nil),
		mod("FireDamage", "MORE", nil),
	},
},
#mods
#skillEnd

#skill SupportLightningExposurePlayer
#set SupportLightningExposurePlayer
#mods
#skillEnd

#skill SupportLightningPenetrationPlayer
#set SupportLightningPenetrationPlayer
#mods
#skillEnd

#skill SupportLockdownPlayer
#set SupportLockdownPlayer
#mods
#skillEnd

#skill SupportFarCombatPlayer
#set SupportFarCombatPlayer
statMap = {
	["support_far_combat_attack_damage_+%_final_from_distance"] = {
		mod("Damage", "MORE", nil, 0, 0, { type = "DistanceRamp", ramp = {{35,0},{70,1}} }),
	},
},
#mods
#skillEnd

#skill SupportFarCombatPlayerTwo
#set SupportFarCombatPlayerTwo
statMap = {
	["support_far_combat_attack_damage_+%_final_from_distance"] = {
		mod("Damage", "MORE", nil, 0, 0, { type = "DistanceRamp", ramp = {{35,0},{70,1}} }),
	},
},
#mods
#skillEnd

#skill SupportMaimPlayer
#set SupportMaimPlayer
#mods
#skillEnd

#skill SupportMaladyPlayer
#set SupportMaladyPlayer
#mods
#skillEnd

#skill SupportManaFlaskPlayer
#set SupportManaFlaskPlayer
#mods
#skillEnd

#skill SupportMarkForDeathPlayer
#set SupportMarkForDeathPlayer
#mods
#skillEnd

#skill SupportMobilityPlayer
#set SupportMobilityPlayer
#mods
#skillEnd

#skill SupportMomentumPlayer
#set SupportMomentumPlayer
statMap = {
	["support_momnetum_damage_+%_final_with_momentum"] = {
		mod("Damage", "MORE", nil, 0, 0, { type = "Condition", var = "Moved2m" }),
	},
},
#mods
#skillEnd

#skill SupportMultishotPlayer
#set SupportMultishotPlayer
statMap = {
	["support_multiple_damage_+%_final"] = {
		mod("Damage", "MORE", nil),
	},
	["support_scattershot_skill_speed_+%_final"] = {
		mod("Speed", "MORE", nil),
	},
},
#mods
#skillEnd

#skill SupportMultishotPlayerTwo
#set SupportMultishotPlayerTwo
statMap = {
	["support_multiple_damage_+%_final"] = {
		mod("Damage", "MORE", nil),
	},
	["support_scattershot_skill_speed_+%_final"] = {
		mod("Speed", "MORE", nil),
	},
},
#mods
#skillEnd

#skill SupportEmpoweredCullPlayer
#set SupportEmpoweredCullPlayer
statMap = {
	["support_empowered_culling_strike"] = {
		mod("ExtraEmpowerMod", "LIST", { mod = mod("CullPercent", "MAX", nil), unscalable = true }),
		value = 10,
	}
},
#mods
#skillEnd

#skill SupportNeuralOverloadPlayer
#set SupportNeuralOverloadPlayer
#mods
#skillEnd

#skill SupportNimbleReloadPlayer
#set SupportNimbleReloadPlayer
#mods
#skillEnd

#skill SupportNovaProjectilesPlayer
#set SupportNovaProjectilesPlayer
statMap = {
	["support_nova_projectiles_damage_+%_final"] = {
		mod("Damage", "MORE", nil),
	},
},
#mods
#skillEnd

#skill SupportOutmaneuverPlayer
#set SupportOutmaneuverPlayer
#mods
#skillEnd

#skill SupportIncreaseLimitPlayer
#set SupportIncreaseLimitPlayer
statMap = {
	["support_limit_skill_effect_duration_+%_final"] = {
		mod("Duration", "MORE", nil),
	},
},
#mods
#skillEnd

#skill SupportIncreaseLimitPlayerTwo
#set SupportIncreaseLimitPlayerTwo
statMap = {
	["support_limit_skill_effect_duration_+%_final"] = {
		mod("Duration", "MORE", nil),
	},
},
#mods
#skillEnd

#skill SupportIncreaseLimitPlayerThree
#set SupportIncreaseLimitPlayerThree
statMap = {
	["support_limit_skill_effect_duration_+%_final"] = {
		mod("Duration", "MORE", nil),
	},
},
#mods
#skillEnd

#skill SupportOverchargePlayer
#set SupportOverchargePlayer
#mods
#skillEnd

#skill SupportOverextendPlayer
#set SupportOverextendPlayer
statMap = {
	["support_overextend_critical_strike_multiplier_+%_final"] = {
		mod("CritMultiplier", "MORE", nil),
	},
},
#mods
#skillEnd

#skill SupportOverreachPlayer
#set SupportOverreachPlayer
statMap = {
	["support_reach_accuracy_within_2m_+%_final"] = {
		mod("Accuracy", "MORE", nil, 0, 0, { type = "MultiplierThreshold", var = "enemyDistance", threshold = 20, upper = true } ),
	},
},
#mods
#skillEnd

#skill SupportPayloadPlayer
#set SupportPayloadPlayer
#mods
#skillEnd

#skill SupportPerfectEndurancePlayer
#set SupportPerfectEndurancePlayer
#mods
#skillEnd

#skill SupportPerfectionPlayer
#set SupportPerfectionPlayer
#mods
#skillEnd

#skill SupportPerpetualChargePlayer
#set SupportPerpetualChargePlayer
#mods
#skillEnd

#skill SupportPiercePlayer
#set SupportPiercePlayer
#mods
#skillEnd

#skill SupportPiercePlayerTwo
#set SupportPiercePlayerTwo
#mods
#skillEnd

#skill SupportPiercePlayerThree
#set SupportPiercePlayerThree
statMap = {
	["support_pierce_damage_+%_final_per_pierced_target"] = {
		mod("Damage", "MORE", nil, 0, 0, { type = "PerStat", stat = "PiercedCount" }),
	},
},
#mods
#skillEnd

#skill SupportPietysMercyPlayer
#set SupportPietysMercyPlayer
#mods
#skillEnd

#skill SupportPinPlayer
#set SupportPinPlayer
#mods
#skillEnd

#skill SupportPinPlayerTwo
#set SupportPinPlayerTwo
#mods
#skillEnd

#skill SupportPinPlayerThree
#set SupportPinPlayerThree
#mods
#skillEnd

#skill SupportPoisonPlayer
#set SupportPoisonPlayer
#mods
#skillEnd

#skill SupportPoisonPlayerTwo
#set SupportPoisonPlayerTwo
#mods
#skillEnd

#skill SupportPoisonPlayerThree
#set SupportPoisonPlayerThree
statMap = {
	["mixed_maladies_poison_effect_+%_final_vs_bleeding"] = {
		mod("Damage", "MORE", nil, 0, KeywordFlag.Poison, { type = "ActorCondition", actor = "enemy", var = "Bleeding" }),
	},
},
#mods
#skillEnd

#skill SupportPracticedComboPlayer
#set SupportPracticedComboPlayer
#mods
#skillEnd

#skill SupportPrecisionPlayer
#set SupportPrecisionPlayer
statMap = {
	["support_precision_accuracy_rating_+%"] = {
		mod("Accuracy", "INC", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Precision" } ),
	},
},
#mods
#skillEnd

#skill SupportPrecisionPlayerTwo
#set SupportPrecisionPlayerTwo
statMap = {
	["support_precision_accuracy_rating_+%"] = {
		mod("Accuracy", "INC", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Precision" } ),
	},
},
#mods
#skillEnd

#skill SupportProjectileAccelerationPlayer
#set SupportProjectileAccelerationPlayer
statMap = {
	["support_faster_projectiles_projectile_speed_+%_final"] = {
		mod("ProjectileSpeed", "MORE", nil),
	},
},
#mods
#skillEnd

#skill SupportProjectileAccelerationPlayerTwo
#set SupportProjectileAccelerationPlayerTwo
statMap = {
	["support_faster_projectiles_projectile_speed_+%_final"] = {
		mod("ProjectileSpeed", "MORE", nil),
	},
},
#mods
#skillEnd

#skill SupportProjectileAccelerationPlayerThree
#set SupportProjectileAccelerationPlayerThree
statMap = {
	["support_faster_projectiles_projectile_speed_+%_final"] = {
		mod("ProjectileSpeed", "MORE", nil),
	},
},
#mods
#skillEnd

#skill SupportProjectileDecelerationPlayer
#set SupportProjectileDecelerationPlayer
statMap = {
	["support_slower_projectiles_projectile_speed_+%_final"] = {
		mod("ProjectileSpeed", "MORE", nil),
	},
},
#mods
#skillEnd

#skill SupportProjectileDecelerationPlayerTwo
#set SupportProjectileDecelerationPlayerTwo
statMap = {
	["support_slower_projectiles_projectile_speed_+%_final"] = {
		mod("ProjectileSpeed", "MORE", nil),
	},
},
#mods
#skillEnd

#skill SupportPunchThroughPlayer
#set SupportPunchThroughPlayer
#mods
#skillEnd

#skill SupportPursuitPlayer
#set SupportPursuitPlayer
statMap = {
	["support_advancing_assault_melee_damage_+%_final_if_projectile_attack_damage_hit_in_past_8_seconds"] = {
		mod("Damage", "MORE", nil, ModFlag.Melee, 0, { type = "Condition", var = "HitProjectileRecently" } ),
	},
	["support_advancing_assault_projectile_damage_+%_final"] = {
		mod("Damage", "MORE", nil, ModFlag.Projectile),
	},
},
#mods
#skillEnd

#skill SupportPursuitPlayerTwo
#set SupportPursuitPlayerTwo
statMap = {
	["support_advancing_assault_melee_damage_+%_final_if_projectile_attack_damage_hit_in_past_8_seconds"] = {
		mod("Damage", "MORE", nil, ModFlag.Melee, 0, { type = "Condition", var = "HitProjectileRecently" } ),
	},
	["support_advancing_assault_projectile_damage_+%_final"] = {
		mod("Damage", "MORE", nil, ModFlag.Projectile),
	},
},
#mods
#skillEnd

#skill SupportPursuitPlayerThree
#set SupportPursuitPlayerThree
statMap = {
	["support_advancing_assault_melee_damage_+%_final_if_projectile_attack_damage_hit_in_past_2_seconds"] = {
		mod("Damage", "MORE", nil, ModFlag.Melee, 0, { type = "Condition", var = "HitProjectileRecently" } ),
	},
	["support_advancing_assault_projectile_damage_+%_final"] = {
		mod("Damage", "MORE", nil, ModFlag.Projectile),
	},
},
#mods
#skillEnd

#skill SupportRakiatasFlowPlayer
#set SupportRakiatasFlowPlayer
#mods
#skillEnd

#skill SupportRapidAttacksPlayer
#set SupportRapidAttacksPlayer
#mods
#skillEnd

#skill SupportRapidAttacksPlayerTwo
#set SupportRapidAttacksPlayerTwo
#mods
#skillEnd

#skill SupportRapidAttacksPlayerThree
#set SupportRapidAttacksPlayerThree
statMap = {
	["support_faster_attacks_damage_+%_final"] = {
		mod("Damage", "MORE", nil, ModFlag.Attack),
	},
},
#mods
#skillEnd

#skill SupportCombatReloadPlayer
#set SupportCombatReloadPlayer
#mods
#skillEnd

#skill SupportRearmPlayer
#set SupportRearmPlayer
#mods
#skillEnd

#skill SupportRearmPlayerTwo
#set SupportRearmPlayerTwo
#mods
#skillEnd

#skill SupportRetreatPlayer
#set SupportRetreatPlayer
statMap = {
	["support_retreating_assault_projectile_damage_+%_final_if_melee_hit_in_past_8_seconds"] = {
		mod("Damage", "MORE", nil, ModFlag.Projectile, 0, { type = "Condition", var = "HitMeleeRecently" } ),
	},
	["support_retreating_assault_melee_damage_+%_final"] = {
		mod("Damage", "MORE", nil, ModFlag.Melee),
	},
},
#mods
#skillEnd

#skill SupportRetreatPlayerTwo
#set SupportRetreatPlayerTwo
statMap = {
	["support_retreating_assault_projectile_damage_+%_final_if_melee_hit_in_past_8_seconds"] = {
		mod("Damage", "MORE", nil, ModFlag.Projectile, 0, { type = "Condition", var = "HitMeleeRecently" } ),
	},
	["support_retreating_assault_melee_damage_+%_final"] = {
		mod("Damage", "MORE", nil, ModFlag.Melee),
	},
},
#mods
#skillEnd

#skill SupportRetreatPlayerThree
#set SupportRetreatPlayerThree
statMap = {
	["support_retreating_assault_projectile_damage_+%_final_if_melee_hit_in_past_2_seconds"] = {
		mod("Damage", "MORE", nil, ModFlag.Projectile, 0, { type = "Condition", var = "HitMeleeRecently" } ),
	},
	["support_retreating_assault_melee_damage_+%_final"] = {
		mod("Damage", "MORE", nil, ModFlag.Melee),
	},
},
#mods
#skillEnd

#skill SupportRicochetPlayer
#set SupportRicochetPlayer
#mods
#skillEnd

#skill SupportRicochetPlayerTwo
#set SupportRicochetPlayerTwo
#mods
#skillEnd

#skill SupportRicochetPlayerThree
#set SupportRicochetPlayerThree
#mods
#skillEnd

#skill SupportRigwaldsFerocityPlayer
#set SupportRigwaldsFerocityPlayer
#mods
#skillEnd

#skill SupportSalvoPlayer
#set SupportSalvoPlayer
#mods
#skillEnd

#skill SupportSecondWindPlayer
#set SupportSecondWindPlayer
#mods
#skillEnd

#skill SupportSecondWindPlayerTwo
#set SupportSecondWindPlayerTwo
#mods
#skillEnd

#skill SupportSecondWindPlayerThree
#set SupportSecondWindPlayerThree
#mods
#skillEnd

#skill SupportShockPlayer
#set SupportShockPlayer
statMap = {
	["support_conduction_chance_to_shock_+%_final"] = {
		mod("EnemyShockChance", "MORE", nil),
	},
},
#mods
#skillEnd

#skill SupportShockingLeapPlayer
#set SupportShockingLeapPlayer
#mods
#skillEnd

#skill SupportSlowPotencyPlayer
#set SupportSlowPotencyPlayer
#mods
#skillEnd

#skill SupportManaOnCullPlayer
#set SupportManaOnCullPlayer
#mods
#skillEnd

#skill SupportSpectralVolleyPlayer
#set SupportSpectralVolleyPlayer
#mods
#skillEnd

#skill SupportStormchainPlayer
#set SupportStormchainPlayer
#mods
#skillEnd

#skill SupportStreamlinedRoundsPlayer
#set SupportStreamlinedRoundsPlayer
statMap = {
	["support_double_barrel_number_of_crossbow_bolts_+"] = {
		mod("CrossbowBoltCount", "BASE", nil)
	},
	["support_auto_shotgun_attack_speed_+%_final"] = {
		mod("Speed", "MORE", nil, ModFlag.Attack)
	},
	["support_auto_shotgun_damage_+%_final"] = {
		mod("Damage", "MORE", nil)
	},
	["support_auto_shotgun_reload_speed_+%_final"] = {
		mod("ReloadSpeed", "MORE", nil)
	},
},
#mods
#skillEnd

#skill SupportSwiftAfflictionPlayer
#set SupportSwiftAfflictionPlayer
statMap = {
	["support_rapid_decay_damage_over_time_+%_final"] = {
		mod("Damage", "MORE", nil, ModFlag.Dot),
	},
},
#mods
#skillEnd

#skill SupportSwiftAfflictionPlayerTwo
#set SupportSwiftAfflictionPlayerTwo
statMap = {
	["support_rapid_decay_damage_over_time_+%_final"] = {
		mod("Damage", "MORE", nil, ModFlag.Dot),
	},
},
#mods
#skillEnd

#skill SupportSwiftAfflictionPlayerThree
#set SupportSwiftAfflictionPlayerThree
statMap = {
	["support_swift_affliction_non_ailment_damage_over_time_+%_final_if_duration_below_1_second"] = {
		mod("Damage", "MORE", nil, ModFlag.Dot, 0, { type = "StatThreshold", stat = "Duration", threshold = 1, upper = true }),
	},
},
#mods
#skillEnd

#skill SupportTacatisIrePlayer
#set SupportTacatisIrePlayer
statMap = {
	["faster_poison_%_per_current_rage"] = {
		mod("PoisonFaster", "INC", nil, 0, 0, { type = "PerStat", stat = "Rage" }),
	},
},
#mods
#skillEnd

#skill SupportTulsStillnessPlayer
#set SupportTulsStillnessPlayer
#mods
#skillEnd

#skill SupportTumultPlayer
#set SupportTumultPlayer
#mods
#skillEnd

#skill SupportUnerringPowerPlayer
#set SupportUnerringPowerPlayer
statMap = {
	["support_discount_skill_cost_+%_final_if_empowered"] = {
		mod("Cost", "MORE", nil, 0, 0, { type = "Condition", var = "Empowered" } )
	},
	["support_discount_accuracy_rating_+%_final_if_empowered"] = {
		mod("Accuracy", "MORE", nil, 0, 0, { type = "Condition", var = "Empowered" } )
	},
},
#mods
#skillEnd

#skill SupportUntouchablePlayer
#set SupportUntouchablePlayer
#mods
#skillEnd

#skill SupportVoltPlayer
#set SupportVoltPlayer
#mods
#skillEnd

#skill SupportWarmbloodedPlayer
#set SupportWarmbloodedPlayer
statMap = {
	["support_freeze_protection_spirit_cost_freeze_duration_on_self_+%_final"] = {
		mod("SelfFreezeDuration", "MORE", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Warm Blooded" }),
	},
},
#mods
#skillEnd

#skill SupportKnockbackWavePlayer
#set SupportKnockbackWavePlayer
#mods
#skillEnd

#skill KnockbackWavePlayer
#set KnockbackWavePlayer
#mods
#skillEnd

#skill SupportWindowOfOpportunityPlayer
#set SupportWindowOfOpportunityPlayer
statMap = {
	["support_window_of_opportunity_perfect_timing_damage_+%_final"] = {
		mod("Damage", "MORE", nil, 0, 0, { type = "Condition", var = "PerfectTiming" }),
	},
},
#mods
#skillEnd

#skill SupportWindowOfOpportunityPlayerTwo
#set SupportWindowOfOpportunityPlayerTwo
statMap = {
	["support_window_of_opportunity_perfect_timing_damage_+%_final"] = {
		mod("Damage", "MORE", nil, 0, 0, { type = "Condition", var = "PerfectTiming" }),
	},
	["gain_%_of_evasion_as_deflection_rating_on_perfect_timing_for_8_seconds"] = {
		mod("EvasionGainAsDeflection", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Window of Opportunity II" }),
	},
},
#mods
#skillEnd
