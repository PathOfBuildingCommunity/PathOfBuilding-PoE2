-- Path of Building
--
-- Strength support gems
-- Skill data (c) Grinding Gear Games
--
local skills, mod, flag, skill = ...

#skill SupportAftershockChancePlayer
#mods

#skill SupportAncestralUrgencyPlayer
#mods

#skill SupportAutoReloadPlayer
#mods

#skill SupportBeheadPlayer
#mods

#skill SupportBloodlustPlayer
	statMap = {
		["support_bloodlust_melee_physical_damage_+%_final_vs_bleeding_enemies"] = {
			mod("PhysicalDamage", "MORE", nil, ModFlag.Melee, 0, { type = "ActorCondition", actor = "enemy", var = "Bleeding" }),
		},
	},
#mods

#skill SupportKnockbackPlayer
#mods

#skill SupportEnduranceChargeOnArmourBreak
#mods

#skill SupportBrutalityPlayer
	statMap = {
		["support_brutality_physical_damage_+%_final"] = {
			mod("PhysicalDamage", "MORE", nil),
		},
	},
#mods

#skill SupportCannibalismPlayer
	statMap = {
		["support_cannibalism_recover_%_maximum_life_on_kill"] = {
			mod("LifeOnKill", "BASE", nil, 0, 0, { type = "PercentStat", stat = "Life", percent = 1 }, { type = "GlobalEffect", effectType = "Buff", unscalable = true }),
		},
	},
#mods

#skill SupportCorruptingCryPlayer
	statMap = {
		["support_corrupting_cry_corrupted_blood_base_physical_damage_per_minute_as_%_of_strength"] = {
			skill("PhysicalDot", nil, { type = "PercentStat", stat = "Str", percent = 1 }),
			div = 60,
		},
		["support_corrupting_cry_warcry_applies_X_stacks_of_corrupted_blood"] = {
			mod("CorruptingCryStagesFromWarcry", nil, 0, KeywordFlag.Warcry)
		},
		["support_corrupting_cry_area_of_effect_+%_final"] = {
			mod("AreaOfEffect", "INC", nil, 0, KeywordFlag.Warcry)
		},
		["support_corrupting_cry_corrupted_blood_duration_ms"] = {
			skill("durationSecondary", nil),
			div = 1000,
		},
		["support_corrupting_cry_warcry_applies_x_stacks_of_corrupted_blood"] = {
			-- Display only
		},
	},
#baseMod skill("debuff", true)
#baseMod flag("dotIsCorruptingBlood")
#baseMod mod("Multiplier:CorruptingCryMaxStages", "BASE", 10)
#baseMod mod("Damage", "MORE", 100, 0, KeywordFlag.PhysicalDot, { type = "Multiplier", var = "CorruptingCryStageAfterFirst"})
#mods

#skill SupportDazingCryPlayer
#mods

#skill SupportDeepCutsPlayer
	statMap = {
		["support_deep_cuts_hit_damage_+%_final"] = {
			mod("Damage", "MORE", nil, ModFlag.Hit),
		},
		["support_deep_cuts_bleeding_effect_+%_final"] = {
			mod("BleedMagnitude", "MORE", nil),
		},
	},
#mods

#skill SupportIncreasedArmourBreakPlayer
	statMap = {
		["support_increased_armour_break_armour_break_amount_+%_final"] = {
			mod("ArmourBreakEffect", "MORE", nil),
		},
	},
#mods

#skill SupportGroundEffectDurationPlayer
#mods

#skill SupportDevastatePlayer
	statMap = {
		["fully_break_enemies_armour_on_heavy_stun"] = {
			flag("Condition:CanArmourBreak", { type = "GlobalEffect", effectType = "Buff", effectName = "ArmourBreak" } ),
		},
	},
#mods

#skill SupportDoubleBarrelPlayer
#mods

#skill SupportEnragedWarcryPlayer
#mods

#skill SupportIgniteDurationPlayer
	statMap = {
		["support_eternal_flame_chance_to_ignite_+%_final"] = {
			mod("EnemyIgniteChance", "MORE", nil),
		},
	},
#mods

#skill SupportExecutePlayer
	statMap = {
		["support_executioner_damage_vs_enemies_on_low_life_+%_final"] = {
			mod("Damage", "MORE", nil, ModFlag.Hit, 0, { type = "ActorCondition", actor = "enemy", var = "LowLife"})
		},
	},
#mods

#skill SupportExploitWeaknessPlayer
	statMap = {
		["support_gem_consume_enemy_fully_broken_armour_to_gain_damage_+%_final"] = {
			mod("Damage", "MORE", nil, 0, 0, { type = "ActorCondition", actor = "enemy", var = "ArmourBroken"})
		},
	},
#mods

#skill LessDurationSupportPlayer
	statMap = {
		["support_reduced_duration_skill_effect_duration_+%_final"] = {
			mod("Duration", "MORE", nil),
		},
	},
#mods

#skill SupportFireExposurePlayer
	statMap = {
		["inflict_fire_exposure_for_x_ms_on_ignite"] = {
			mod("FireExposureChance", "BASE", nil, 0, 0, { type = "ActorCondition", actor = "enemy", var = "Ignited"}),
		},
	},
#mods

#skill SupportAddedFireDamagePlayer
	statMap = {
		["support_cold_and_lightning_damage_+%_final"] = {
			mod("ColdDamage", "MORE", nil),
			mod("LightningDamage", "MORE", nil),
		},
	},
#mods

#skill SupportFirePenetrationPlayer
#mods

#skill FistOfWarSupportPlayer
	statMap = {
		["ancestral_slam_interval_duration"] = {
			mod("FistOfWarCooldown", "BASE", nil),
			div = 1000,
		},
	},
#baseMod mod("FistOfWarDamageMultiplier", "BASE", 20)
#baseMod mod("FistOfWarMOREAoE", "BASE", 20)
#mods

#skill SupportBloodFountainPlayer
	statMap = {
		["support_blood_fountain_life_regeneration_rate_per_minute_%"] = {
			mod("LifeRegenPercent", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Aura" }),
			div = 60,
		},
	},
#mods

#skill SupportRageFountainPlayer
	statMap = {
		["support_rage_fountain_rage_regeneration_per_minute"] = {
			mod("RageRegen", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Aura" }),
			div = 60,
		},
	},
#mods

#skill SupportFreshClipPlayer
#mods

#skill SupportMeleePhysicalDamagePlayer
	statMap = {
		["support_melee_physical_damage_+%_final"] = {
			mod("PhysicalDamage", "MORE", nil, ModFlag.Melee),
		},
		["support_melee_physical_damage_attack_speed_+%_final"] = {
			mod("Speed", "MORE", nil, ModFlag.Attack),
		},
	},
#mods

#skill SupportHeftPlayer
	statMap = {
		["support_maximum_physical_hit_damage_+%_final"] = {
			mod("MaxPhysicalDamage", "MORE", nil, ModFlag.Hit),
		},
	},
#mods

#skill SupportHerbalismPlayer
	statMap = {
		["support_herbalism_life_recovery_+%_from_life_flasks"] = {
			mod("FlaskLifeRecovery", "INC", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff" }),
		},
	},
#mods

#skill SupportHolyDescentPlayer
	statMap = {
		["support_holy_descent_consecrated_ground_on_landing"] = {
			-- Display only
		},
		["support_holy_descent_consecrated_ground_base_duration_ms"] = {
			-- Display only
		},
	},
#mods

#skill SupportChanceToIgnitePlayer
	statMap = {
		["support_ignition_chance_to_ignite_+%_final"] = {
			mod("EnemyIgniteChance", "MORE", nil),
		},
	},
#mods

#skill SupportImmolatePlayer
#mods

#skill ImpactShockwaveSupportPlayer
#mods

#skill SupportInfernalLegionPlayer
	statMap = {
		["minion_fire_damage_%_of_maximum_life_taken_per_minute"] = {
			mod("MinionModifier", "LIST", { mod = mod("FireDegen", "BASE", nil, 0, 0, { type = "PerStat", stat = "Life" }, { type = "GlobalEffect", effectType = "Buff" }) }),
			div = 6000,
		},
		["support_minion_instability_minion_base_fire_area_damage_per_minute"] = {
			mod("MinionModifier", "LIST", { mod = mod("Multiplier:InfernalLegionBaseDamage", "BASE", nil, 0, 0, { type = "PercentStat", stat = "Life", percent = 1 }) }),
			div = 60,
			mod("ExtraMinionSkill", "LIST", { skillId = "InfernalLegion" }),
		},
	},
#mods

#skill SupportInspirationPlayer
	statMap = {
		["support_inspiration_cost_+%_final"] = {
			mod("Cost", "MORE", nil),
		},
	},
#mods

#skill SupportIronwoodPlayer
#mods

#skill SupportJaggedGroundPlayer
#mods

#skill SupportChanceToBleedPlayer
#mods

#skill SupportLifeLeechPlayer
#mods

#skill SupportBloodMagicPlayer
#mods

#skill SupportLongFusePlayer
#mods

#skill SupportMeatShieldPlayer
	statMap = {
		["support_minion_maximum_life_+%_final"] = {
			mod("MinionModifier", "LIST", { mod = mod("Life", "MORE", nil) }),
		},
		["support_meat_shield_minion_damage_+%_final"] = {
			mod("MinionModifier", "LIST", { mod = mod("Damage", "MORE", nil) }),
		},
	},
#mods

#skill SupportOverpowerPlayer
	statMap = {
		["support_overpower_hit_damage_stun_multiplier_+%_final"] = {
			mod("StunBuildup", "MORE", nil),
		},
	},
#mods

#skill MoreDurationSupportPlayer
	statMap = {
		["support_more_duration_skill_effect_duration_+%_final"] = {
			mod("Duration", "MORE", nil),
		},
	},
#mods

#skill SupportEmpoweredDamagePlayer
#mods

#skill SupportWeaponElementalDamagePlayer
	statMap = {
		["support_weapon_elemental_damage_+%_final"] = {
			mod("ElementalDamage", "MORE", nil, 0, KeywordFlag.Attack),
		},
	},
#mods

#skill SupportRagePlayer
#mods

#skill SupportRageforgedPlayer
#mods

#skill SupportRagingCryPlayer
#mods

#skill SupportRupturePlayer
#mods

#skill RuthlessSupportPlayer
#mods

#skill SupportDeadlyIgnitesPlayer
	statMap = {
		["support_stronger_ignites_hit_damage_+%_final"] = {
			mod("Damage", "MORE", nil, ModFlag.Hit),
		},
		["support_stronger_ignites_ignite_effect_+%_final"] = {
			mod("IgniteMagnitude", "MORE", nil),
		},
	},
#mods

#skill SupportArmourBreakPlayer
#mods

#skill SupportStompingGroundPlayer
#mods

#skill StompingGroundShockwavePlayer
#mods

#skill SupportTremorsPlayer
#mods

#skill UnbreakableSupportPlayer
	statMap = {
		["support_unbreakable_stun_threshold_+%_final_while_performing_action"] = {
			mod("StunThreshold", "MORE", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff", unscalable = true }),
		},
	},
#mods

#skill SupportUpheavalPlayer
	statMap = {
		["support_additional_fissures_damage_+%_final"] = {
			mod("Damage", "MORE", nil, ModFlag.Hit),
		},
		["support_additional_fissures_attack_speed_+%_final"] = {
			mod("Speed", "MORE", nil, ModFlag.Attack),
		},
	},
#mods

#skill SupportVitalityPlayer
	statMap = {
		["support_vitality_life_regeneration_rate_per_minute_%"] = {
			mod("LifeRegenPercent", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff" }),
			div = 60,
		},
	},
#mods